# Configuration file for Gasper

# Terminology:-
#   Node: A Virtual Machine or a Bare-Metal Server
#   Master Node: A node which has `Dominus` service deployed
#   Worker Node: A node which has `Mizu`/`MySQL`/`MongoDB` services deployed

# Run Gasper in Debug mode.
# Set this value to `false` in Production.
debug = true

# Root domain for all deployed applications.
domain = "sdslabs.local"

# Secret Key used by Gasper.
secret = "YOUR_SECRET_KEY"

# Root of the deployed application in the docker container's filesystem.
project_root = "/gasper"

# Name of the file used for building and running applications.
# This file is application specific and must be present in an application's git repository's root.
# The contents of the file must be linux shell commands separated by newlines.
rc_file = "Gasperfile.txt"

# Run Gasper in Offline mode.
# For Development purposes only.
offline_mode = false

# DNS nameservers used by docker containers.
dns_servers = [
    "8.8.8.8",
    "8.8.4.4",
]

# Default admin credentials for the Gasper ecosystem.
[admin]
email = "anish.mukherjee1996@gmail.com"
username = "alphadose"
password = "alphadose"

# Configuration for the MongoDB storage used by Gasper.
[mongo]
# For databases with authentication
# use `mongodb://username:password@host:port`.
url = "mongodb://localhost:27017"

# Configuration for the Redis storage used by Gasper.
# It acts as the central registry-server.
[redis]
host = "localhost"
port = 6379
password = ""
db = 0

# Configuration for Cloudflare Plugin.
[cloudflare]
# API Token used for editing Cloudflare's DNS records.
# This token must have the scopes ZONE:ZONE:EDIT and ZONE:DNS:EDIT.
api_token = "" 
plugin = false  # Use Cloudflare Plugin?
public_ip = ""  # IPv4 address for Cloudflare's DNS records to point to.

[falcon]
plugin = false
falcon_client_id = ""
falcon_client_secret = ""
falcon_access_token_url = "http://falcon.sdslabs.local/access_token"
falcon_resource_owner_url = "http://falcon.sdslabs.local/users/"
falcon_accounts_url = "http://arceus.sdslabs.local/"
redirect_uri =  ""

# Docker images in use.
[images]
static = "sdsws/static:2.0"
php = "sdsws/php:3.0"
nodejs = "sdsws/node:2.0"
python2 =  "sdsws/python2:1.0"
python3 = "sdsws/python3:1.0"
golang = "sdsws/golang:1.0"
mysql = "mysql:5.7"
mongodb = "mongo:4.2.1"


# Configuration for the microservices comprising Gasper.
[services]

# Time Interval (in seconds) in which the current node updates
# the central registry-server with the status of its microservices.
exposure_interval = 30


# Configuration for `Dominus` which acts as a master controller.
# A node with `Dominus` deployed is a master node.
# It performs the following tasks:-
#   1. Equal distribution of applications and databases among worker nodes
#   2. User API for performing operations on any application/database in any node (IAM is handled with JWT)
#   3. Admin API for fetching information of all nodes, applications, databases and users
#   4. Removal of inactive nodes from the cloud
#   5. Authentication based on JWT (JSON Web Token)
#   6. Re-scheduling of applications in case of node failure
[services.dominus]
# Time Interval (in seconds) in which `Dominus` sends health-check probes
# to all worker nodes and removes inactive nodes from the central registry-server.
cleanup_interval = 600
deploy = true   # Deploy Dominus?
port = 3000


# Configuration for `Enrai`, a reverse-proxy server proxying connections
# to an application's docker container.
[services.enrai]
deploy = false  # Deploy Enrai?
port = 80
# Configuration for using SSL with `Enrai`.
[services.enrai.ssl]
plugin = false  # Use SSL with Enrai?
port = 443
certificate = "/home/user/fullchain.pem"  # Certificate Location
private_key = "/home/user/privkey.pem"  # Private Key Location


# Configuration for `Mizu`, a REST API for deploying applications
# inside docker containers and managing them.
# A node with `Mizu` deployed is a worker node.
[services.mizu]
deploy = true   # Deploy Mizu?
port = 4000


# Configuration for `Hikari`, a DNS Server holding `A` records of
# all deployed applications.
[services.hikari]
# Time Interval (in seconds) in which `Hikari` updates its
# `Record Storage` by polling the central registry-server.
record_update_interval = 30
deploy = false  # Deploy Hikari?
port = 53


# Configuration for `SSH` service which provides SSH access
# directly to an application's docker container.
# It uses a password based authentication.
[services.ssh]
deploy = false   # Deploy SSH Server?
port = 2222
# Location of Private Key for creating the SSH Signer.
host_signers = ["/home/user/.ssh/id_rsa"]
using_passphrase = false   # Private Key is passphrase protected?
passphrase = ""   # Passphrase for decrypting the Private Key
# IP address to establish a SSH connection to.
# Equal to the current node's IP address if left blank.
# This field is only for information of the client who will create applications 
# and this field's value will not affect the service's functioning in any manner.
# To be used when the current node is only accessible by a jump host or 
# behind some network forwarding rule.
entrypoint_ip = ""


# Configuration for `MySQL` service, a REST API for managing
# MySQL databases using a single docker container.
# A node with `MySQL` service deployed is a worker node.
[services.mysql]
deploy = true   # Deploy MySQL Service?
port = 9000
container_port = 33060  # Port on which the MySQL container will run
# Environment variables for MySQL docker container.
[services.mysql.env]
MYSQL_ROOT_PASSWORD = "YOUR_MYSQL_PASSWORD"  # Root password of MySQL server inside the container


# Configuration for `MongoDB` service, a REST API for managing
# MongoDB databases using a single docker container.
# A node with `MongoDB` service deployed is a worker node.
[services.mongodb]
deploy = true   # Deploy MongoDB Service?
port = 9001
container_port = 27018  # Port on which the MongoDB container will run
# Environment variables for MongoDB docker container.
[services.mongodb.env]
MONGO_INITDB_ROOT_USERNAME = "YOUR_ROOT_NAME"   # Root user of MongoDB server inside the container
MONGO_INITDB_ROOT_PASSWORD = "YOUR_ROOT_PASSWORD"   # Root password of MongoDB server inside the container
